# goRPC in Go

This is a minimal example project to understand **gRPC in Golang**.  
It implements a simple **Greeter service** where the client sends a name and the server replies with `"Hello <name>"`.

---

## ðŸ“‚ Project Structure
grpc-demo/
â”œâ”€â”€ proto/
â”‚    â””â”€â”€ greeter.proto
â”œâ”€â”€ server/
â”‚    â””â”€â”€ main.go
â”œâ”€â”€ client/
â”‚    â””â”€â”€ main.go
â””â”€â”€ go.mod

---

## ðŸš€ Prerequisites

1. **Install Go** (>=1.20)  
   [Download & install Go](https://go.dev/doc/install)

2. **Install Protocol Buffers compiler (`protoc`)**  
   - **Mac**: `brew install protobuf`  
   - **Linux**: `sudo apt install -y protobuf-compiler`  
   - **Windows**: [Download release](https://github.com/protocolbuffers/protobuf/releases)

   Verify installation:
   ```bash
   $ protoc --version

   $ go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
   $ go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
   $ export PATH="$PATH:$(go env GOPATH)/bin"
   $ which protoc-gen-go   
   $ which protoc-gen-go-grpc
   $ go mod tidy

   $ protoc --go_out=. --go-grpc_out=. proto/greeter.proto
   This generates:
	â€¢	proto/greeter.pb.go
	â€¢	proto/greeter_grpc.pb.go

   $ go run server/main.go
   $ go run client/main.go
   Greeting: Hello Sarvesh